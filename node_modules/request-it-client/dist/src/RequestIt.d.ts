import { RequestOptions, IncomingMessage } from './Interfaces';
import { RequestItCookieJar } from './RequestItCookieJar';
/** Node.js library for Promise-based, asynchronous http/s requests. */
export declare class RequestIt {
    /** @param {RequestOptions} [options={}] - Default options. Object like NodeJS RequestOptions, but with additional parameters accepted. */
    constructor(options?: RequestOptions);
    options: RequestOptions;
    cookieJar: RequestItCookieJar;
    maxRedirects: number;
    private isNullOrUndefined;
    private setMaxRedirects;
    private getProtocol;
    private getSafeOptions;
    private cleanUpOptions;
    private jsonify;
    private prepareBody;
    private prepareOptions;
    private quickMethod;
    /** Base method for making a request.
     * @param {RequestOptions|string|URL} [options={}] - Options to override the defaults, or a url.
     * @returns {Promise<IncomingMessage>} The IncomingMessage object with parsed body and RawBody.
     */
    go(options?: RequestOptions | string | URL): Promise<IncomingMessage>;
    get(options?: RequestOptions | string | URL): Promise<IncomingMessage>;
    patch(options?: RequestOptions | string | URL): Promise<IncomingMessage>;
    post(options?: RequestOptions | string | URL): Promise<IncomingMessage>;
    put(options?: RequestOptions | string | URL): Promise<IncomingMessage>;
    delete(options?: RequestOptions | string | URL): Promise<IncomingMessage>;
    static go(options?: RequestOptions | string | URL): Promise<IncomingMessage>;
    static get(options?: RequestOptions | string | URL): Promise<IncomingMessage>;
    static patch(options?: RequestOptions | string | URL): Promise<IncomingMessage>;
    static post(options?: RequestOptions | string | URL): Promise<IncomingMessage>;
    static put(options?: RequestOptions | string | URL): Promise<IncomingMessage>;
    static delete(options?: RequestOptions | string | URL): Promise<IncomingMessage>;
}
